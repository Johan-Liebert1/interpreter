PROGRAM --> block
block --> declarations statement_list
function --> DEFINE ID LPAREN formal_parameters_list? RPAREN LCURLY block RCURLY
formal_parameter_list --> formal_parameters | formal_parameters SEMI_COLON formal_parameter_list
formal_parameters --> ID (COMMA ID)* COLON type_spec
function_call --> ID LPAREN (expression (COMMA expression)*)? RPAREN
if_statement --> IF LCURLY statement_list RCURLY (ELIF LCURLY statement_list RCURLY)* (ELSE LCURLY statement_list RCURLY){0,1}
declarations --> LET (variable_declaration SEMI)+ | function* | blank
variable_declaration --> ID (COMMA ID)* COLON var_type
var_type --> INTEGER | FLOAT
statement_list --> statement SEMI_COLON | statement SEMI_COLON statement_list
statement --> assignment_statement | function_call | if_statement | blank
conditional_statement --> expression comparator expression
assignment_statement --> variable ASSIGN expression
logical_statement --> NOT* (comparator ((AND | OR) comparator)*)
variable --> ID
blank --> 
expression --> term ((PLUS | MINUS) term)*
term --> factor ((MUL | DIV) factor)*
factor --> ((PLUS | MINUS) factor) | INTEGER | FLOAT | LPAREN expression RPAREN | variable
comparator --> > | < | >= | <= | ==
LPAREN --> (
RPAREN --> )
LCURLY --> {
RCURLY --> }